Kernel command line: -q run priority-donate-one
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  137,420,800 loops/s.
Boot complete.
Executing 'priority-donate-one':
(priority-donate-one) begin
(priority-donate-one) This thread should have priority 32.  Actual priority: 31.
(priority-donate-one) This thread should have priority 33.  Actual priority: 31.
(priority-donate-one) acquire2, acquire1 must already have finished, in that order.
(priority-donate-one) This should be the last line before finishing this test.
(priority-donate-one) end
Execution of 'priority-donate-one' complete.
Timer: 27 ticks
Thread: 0 idle ticks, 27 kernel ticks, 0 user ticks
Console: 777 characters output
Keyboard: 0 keys pressed
PoweriInterrupt 0x0d (#GP General Protection Exception) at rip=8004208da5
 cr2=0000000000000000 error=               c
rax 0000000000000000 rbx 0000000000204400 rcx 0000000000000069 rdx 00000000000003f9
rsp 0000008004000ef8 rbp 0000008004000f30 rsi 0000000000000003 rdi 0000000000000001
rip 0000008004208da5 r8 0000008004000ec8  r9 00000080042166f4 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200002
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x800421340c 0x800420899a 0x8004208d4c 0x8004207aae 0x800420e079 0x80042167c0 0x800421662b 0x80042067f3 0x800420613d.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 28 ticks
Thread: 0 idle ticks, 28 kernel ticks, 0 user ticks
Console: 1